group by a.State")
if( num == 'worst') {
b <- sqldf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on
s1.State = a.State
inner join t on
s1.State = t.St and a.rank = t.count
order by 2 ")
}
if( num == 'best') {
num <- 1
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
and a.rank = %s order by 2 ", num)) }
row.names(b) <- b$state
return(b)
}
#stop("invalid outcome")
}
rankall <- function(outcome, num = "best") {
## Read outcome data
library(sqldf)
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
name <- names (sqldf("select * from data"))
data[,11] <- suppressWarnings(as.numeric(data[,11] ))
data[,17] <- suppressWarnings(as.numeric(data[,17]))
data[,23] <- suppressWarnings(as.numeric(data[,23] ))
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
if (outcome == "heart attack") {
s1 <- sqldf("select distinct data.State as State from data ")
a <- fn$sqldf( "select data.State,data.Hospital_Name,`name[11]` as heartattack from data
where `name[11]` IS NOT NULL order by 3,2")
a$rank <- suppressWarnings(ave(a$heartattack,a$State, FUN=seq))
t <- sqldf("select a.State as St,max(a.rank) as count from a
group by a.State")
if( num == 'worst') {
b <- sqldf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
inner join t on s1.State = t.St and a.rank = t.count
order by 2 ")}
else if( num == 'best') {
num <- 1
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State and a.rank = %s order by 2 ", num))
}
else {
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
and a.rank = %s order by 2 ", num))
}
row.names(b) <- b$state
return(b)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart failure") {
s1 <- sqldf("select distinct data.State as State from data ")
a <- fn$sqldf( "select data.State,data.Hospital_Name,`name[17]` as heartattack from data
where `name[17]` IS NOT NULL order by 3,2")
a$rank <- suppressWarnings(ave(a$heartattack,a$State, FUN=seq))
t <- sqldf("select a.State as St,max(a.rank) as count from a
group by a.State")
if( num == 'worst') {
b <- sqldf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on
s1.State = a.State
inner join t on
s1.State = t.St and a.rank = t.count
order by 2 ")
}
if( num == 'best') {
num <- 1
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
and a.rank = %s order by 2 ", num)) }
row.names(b) <- b$state
return(b)
}
#stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
library(sqldf)
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
name <- names (sqldf("select * from data"))
data[,11] <- suppressWarnings(as.numeric(data[,11] ))
data[,17] <- suppressWarnings(as.numeric(data[,17]))
data[,23] <- suppressWarnings(as.numeric(data[,23] ))
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
if (outcome == "heart attack") {
s1 <- sqldf("select distinct data.State as State from data ")
a <- fn$sqldf( "select data.State,data.Hospital_Name,`name[11]` as heartattack from data
where `name[11]` IS NOT NULL order by 3,2")
a$rank <- suppressWarnings(ave(a$heartattack,a$State, FUN=seq))
t <- sqldf("select a.State as St,max(a.rank) as count from a
group by a.State")
if( num == 'worst') {
b <- sqldf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
inner join t on s1.State = t.St and a.rank = t.count
order by 2 ")}
else if( num == 'best') {
num <- 1
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State and a.rank = %s order by 2 ", num))
}
else {
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
and a.rank = %s order by 2 ", num))
}
row.names(b) <- b$state
return(b)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart failure") {
s1 <- sqldf("select distinct data.State as State from data ")
a <- fn$sqldf( "select data.State,data.Hospital_Name,`name[17]` as heartattack from data
where `name[17]` IS NOT NULL order by 3,2")
a$rank <- suppressWarnings(ave(a$heartattack,a$State, FUN=seq))
t <- sqldf("select a.State as St,max(a.rank) as count from a
group by a.State")
if( num == 'worst') {
b <- sqldf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
inner join t on s1.State = t.St and a.rank = t.count
order by 2 ")}
else if( num == 'best') {
num <- 1
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State and a.rank = %s order by 2 ", num))
}
else {
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
and a.rank = %s order by 2 ", num))
}
row.names(b) <- b$state
return(b)
}
if (outcome == "pneumonia") {
s1 <- sqldf("select distinct data.State as State from data ")
a <- fn$sqldf( "select data.State,data.Hospital_Name,`name[23]` as heartattack from data
where `name[23]` IS NOT NULL order by 3,2")
a$rank <- suppressWarnings(ave(a$heartattack,a$State, FUN=seq))
t <- sqldf("select a.State as St,max(a.rank) as count from a
group by a.State")
if( num == 'worst') {
b <- sqldf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
inner join t on s1.State = t.St and a.rank = t.count
order by 2 ")}
else if( num == 'best') {
num <- 1
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State and a.rank = %s order by 2 ", num))
}
else {
b <- sqldf(sprintf("select a.Hospital_Name as hospital,s1.State as state
from s1 left outer join a on s1.State = a.State
and a.rank = %s order by 2 ", num))
}
row.names(b) <- b$state
return(b)
}
stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
load(url("http://www.openintro.org/stat/data/ames.RData"))
names(ames)
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
boxplot(area)
1743-1126
hist(area)
samp0 <- sample(area, 50)
samp1 <- sample(area, 50)
hist(sampl1)
hist(samp1)
mean(samp1)
summary(area)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
for (i in 1:5000) {}
for (i in 1:5000) { samp <- sample(area, 50)                    sample_means50[i] <- mean(samp) }
for (i in 1:5000) { samp <- sample(area, 50)                    sample_means50[i] <- mean(samp) }
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
summary(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
hist(sample_means50)
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
price50 <- sample(price,50)
summary(50)
summary(price50)
sample_price_means50 <- rep(NA,5000)
for (i in 1:5000){}
for (i in 1:5000){
samp <- sample(price,50)
sample_price_means50[i] <- mean(samp)
}
hist(sample_price_means50)
par(mfrow = c(1)
)
par(mfrow = c(1))
par(mfrow = c(1,1))
hist(sample_price_means50)
summary(sample_price_means50)
sample_price_means150 <- rep(NA,5000)
for (i in 1:5000){
samp <- sample(price,150)
sample_price_means150[i] <- mean(samp)
}
par(mfrow = c(2,1))
hist(sample_price_means150)
hist(sample_price_means50)
xlimits = range(sample_means10)
xlimits = range(sample_means_price)
xlimits = range(sample_means_price50)
xlimits = range(sample_price_means50)
hist(sample_price_means50, breaks = 20, xlim = xlimits)
hist(sample_price_means150, breaks = 20, xlim = xlimits)
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
par(mfrow = c(1,1))
hist(samp)
summar(samp)
summary(samp)
table(samp)
sample_mean <- mean(samp)
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
lower <- samp_mean - 1.96 * samp_sd/sqrt(n)
upper <- samp_mean + 1.96 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
4.4-1.6
2.8/2
-3.3+4.7
21.7-20.3
1.79^2 * 15^2
1.5 *6 /4.31
2.088167/2
2*0.1587
1-0.3174
1.5*6
9/4.31
0.0207*2
0.0188*2
4.31/6
1.64*0.718
1.17752+30.69
1.17752-30.69
2.33*30
2.33*30/4
17.475^2
sqrt(40)
(9.51-10)*sqrt(40)/4.65
1-0666
1-.666
0.09*.9
.91*.02
.081/(.081+.0182)
(-5-4-3-2+1+7+10+11+17+18)
-11-5-3-3-1-1-1+2+3+5+12
0.09*.9 + (0.91*0.2)
.9*.09
x <- 0.91*0.02
x+.081
x
0.081/.0992
y <- 1.28*18/4
y^2
1.96*0.05/(sqrt(1028))
1.96*0.055/(sqrt(1028))
1.96*5/(sqrt(1028))
0.15-.11
0.4/2
0.04/2
1.96*0.02/(sqrt(1028))
30*0.8
load(url("http://bit.ly/dasi_nc"))
rm(list=ls())
load(url("http://bit.ly/dasi_nc"))
str(nc)
summary(nc)
plot(nc$gained)
table(nc$gained)
table(nc[,is.na(gained)]
?
)
table(nc[,is.na(gained)])
nc[,is.na(gained)]
nc[,is.na(na$gained)]
nc[,is.na(nc$gained)]
is.na(nc$gained)
table(is.na(nc$gained))
gained_clean = na.omit(nc$gained)
n = length(gained_clean)
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
se(boot_means)
stderr(boot_means)
stderr?
%
boot_mean(stderr())
boot_means(stderr())
stderr(boot_means)
std <- function(x) sd(x)/sqrt(length(x))
std(boot_means)
quantile(boot_means,c(.5,.95))
quantile(boot_means,c(.05,.95))
std(boot_means)
sd(boot_means)
sqrt(length(boot_means))
source("http://bit.ly/dasi_inference")
str(inference)
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "mean",
boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "mean",boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median",boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median",
boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median",boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median",boot_method = "se")
inference(nc$fage, type = "ci", method = "simulation", conflevel = 0.95, est = "mean",boot_method = "se")
inference(nc$fage, type = "ci", method = "simulation", conflevel = 0.95, est = "mean",boot_method = "se")
str(nc)
plot(nc$habit,nc$weight)
hist(nc$habit,nc$weight)
hist(nc$weight,nc$habit)
plot(nc$habit,nc$weight)
plot(nc$weight)
plot(nc$weight,nc$habit == "nonsmoker")
plot(nc$weight,nc$habit == "smoker")
table(nc$weight)
plot(nc$habit == "smoker",nc$weight)
plot(nc$habit == "nonsmoker",nc$weight)
plot(nc$weight)
plot(nc$habit,nc$weight)
by(nc$weight, nc$habit, mean)
by(nc$weight, nc$habit, length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
by(nc$weight, nc$habit, mean)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
str(nc)
table(nc[nc$mature == "mature mom",c(2)])
table(nc[nc$mature != "mature mom",c(2)])
load(url("http://bit.ly/dasi_gss_ws_cl"))
str(gss)
summary(gss)
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht",alternative = "greater", method = "theoretical")
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht",alternative = "greater", method = "theoretical")
source("http://bit.ly/dasi_inference")
rm(list=ls())
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
str(atheism)
head(athesim)
head(athesim)
table(athesim)
athesim
str(atheism)
atheism
head(atheism)
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year == "2012")
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year == "2012")
table(us12)
head(us12)
table(us12$response)
50/952
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",success = "atheist")
1.96 * 0.0069
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
plot(me ~ p)
plot(me ~ p)
sp12 = subset(atheism, atheism$nationality == "Spain" & atheism$year == "2012" | atheism$year == "2015")
table(sp12)
table(sp12$year,sp12$response)
sp12 = subset(atheism, atheism$nationality == "Spain" & atheism$year == "2012" | atheism$year == "2005")
table(sp12$year,sp12$response)
prop.table(sp12$year,sp12$response)
prop.table(sp12)
2022/(2022+34083)
103/(103+1042)
inference(sp12$response, as.factor(sp12$year), est = "proportion", type = "ht", null = 0, alternative = "twosided", method = "theoretical", success = "atheist")
us12 = subset(atheism, atheism$nationality == "United States" & (atheism$year == "2012" |atheism$year == "2005") )
inference(us12$response, as.factor(us12$year), est = "proportion", type = "ht", null = 0, alternative = "twosided", method = "theoretical", success = "atheist")
0.05 * 39
(1.96^2) * 0.5 * (0.5)/(0.01^2)
inference(sp12$response, as.factor(sp12$year), est = "proportion", type = "ht", null = 0, alternative = "twosided", method = "theoretical", success = "atheist")
493/1037
0.47 * (1- 0.47)/1037
596/1028
0.57 * (1-0.57)/1028
sqrt(0.0002402 + 0.0002384)
7/40 * 3
7/40 * 24
7/50 * 24
library(Shniy)
library(Shiny)
library(shiny)
library(rCharts)
setwd("~/datasciencecoursera/untitled folder")
runApp()
install.packages("devtools")
library(devtools)
runApp()
runExample("01_hello")
